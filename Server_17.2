import socket
import select
import time
from datetime import datetime
from bs4 import BeautifulSoup
import requests
from PyDictionary import PyDictionary


MAX_MSG_LENGTH = 1024
SERVER_PORT = 5555
SERVER_IP = "127.0.0.1"
print("Setting up server...")
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((SERVER_IP, SERVER_PORT))
server_socket.listen()
DATA2 = "Server Message: "
print("Listening for clients...")
client_sockets = []
messages_To_Send = []
list_of_chat_clients = []
sockets_to_send = []
PARTS_OF_SPEECH = ("Noun", "Verb", "Adjective")


def in2d(var, l):  # gets 2d list and checks whether var is in the list
    for item in l:
        for val in item:
            if val == var:
                return True
    return False


def index_in_2d(var, l):  # gets 2d list and returns index of var in list as tuple -1 if not found
    ind = ()
    for i in range(len(l)):
        for j in range(len(l[i])):
            if l[i][j] == var:
                ind = (i, j)
                return ind
    return -1


def get_meaning(messege):  # gets a message and returns the meaning of it
    definition = messege[1::].capitalize()
    dictionary = PyDictionary(definition)
    meaning_unsorted = dictionary.getMeanings()[definition]
    meaning_sorted = f"meaning of the word {definition}:\n"
    if meaning_unsorted is None:
        return False
    for i in range(len(PARTS_OF_SPEECH)):
        if PARTS_OF_SPEECH[i] in meaning_unsorted:
            meaning_sorted += f"{PARTS_OF_SPEECH[i]}: {meaning_unsorted[PARTS_OF_SPEECH[i]]}\n\n"
    return meaning_sorted

while True:
    rlist, wlist, xlist = select.select([server_socket] + client_sockets, client_sockets, [])
    for current_socket in rlist:  # goes over list of sockets it can read from
        if current_socket is server_socket:
            connection, client_address = current_socket.accept()
            print("New client joined!", client_address)
            client_sockets.append(connection)
        else:
            try:
                data = current_socket.recv(MAX_MSG_LENGTH).decode()
                if data == "STOP":  # if data is STOP then disconnect the client socket
                    print("Connection closed", datetime.now().strftime("%H:%M"), client_address[0])
                    client_sockets.remove(current_socket)
                    current_socket.close()
                else:
                    messages_To_Send.append((current_socket, data))  # appends socket of sender and message into list of messages
                    print(datetime.now().strftime("%H:%M"), data, client_address[0])

            except ConnectionResetError as E:
                print("Connection closed", datetime.now().strftime("%H:%M"), client_address[0])
                client_sockets.remove(current_socket)
                current_socket.close()
    for message in messages_To_Send:
        current_socket, data = message
        if data[0] == "*":  # if client requests to join or open a private chat room
            data = data[1::]
            if not in2d(data, list_of_chat_clients) and not in2d(current_socket, list_of_chat_clients):  # create room if code is not found
                list_of_chat_clients.append([data, current_socket])
            elif in2d(data, list_of_chat_clients) and not in2d(current_socket, list_of_chat_clients):  # add client to room if room exists
                coords = index_in_2d(data, list_of_chat_clients)
                print("shua: ", coords)
                list_of_chat_clients[coords[0]].append(current_socket)
            else:
                if current_socket in wlist:
                    current_socket.send("You are already in a room".encode("UTf-8"))
            data = "*"

        print(list_of_chat_clients)
        sockets_to_send = []
        if data != "*":
            for s in list_of_chat_clients:
                if current_socket in s:
                    sockets_to_send = s  # sockets in private room
                    break
        if data[0] == "@":
            if current_socket in wlist:
                if get_meaning(data) is False:
                    current_socket.send("Definition Not Found".encode("UTF-8"))
                else:
                    current_socket.send(get_meaning(data).encode("UTF-8"))
        else:
            if data != "*":
                data = DATA2 + data
                print(sockets_to_send)
                if sockets_to_send == []:
                    for sock in wlist:  # goes over writeable sockets
                        if sock != current_socket and not in2d(sock, list_of_chat_clients):
                            sock.send(data.encode("UTF-8"))
                else:
                    for sock in sockets_to_send:
                        if sock in wlist and sock != current_socket:
                            sock.send(data.encode("UTF-8"))
        messages_To_Send.remove(message)

# Todo: add a remove from private room option.
